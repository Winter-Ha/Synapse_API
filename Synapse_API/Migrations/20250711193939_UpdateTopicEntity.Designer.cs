// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Synapse_API.Data;

#nullable disable

namespace Synapse_API.Migrations
{
    [DbContext(typeof(SynapseDbContext))]
    [Migration("20250711193939_UpdateTopicEntity")]
    partial class UpdateTopicEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Synapse_API.Models.Entities.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentEventID")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("CourseID");

                    b.HasIndex("ParentEventID");

                    b.HasIndex("UserID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.EventReminder", b =>
                {
                    b.Property<int>("ReminderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderID"));

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReminderTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ReminderID");

                    b.HasIndex("EventID");

                    b.ToTable("EventReminders");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Goal", b =>
                {
                    b.Property<int>("GoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalID"));

                    b.Property<string>("GoalDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("GoalID");

                    b.HasIndex("UserID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.LearningActivity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityID"));

                    b.Property<int>("ActivityType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("UserID");

                    b.ToTable("LearningActivities");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.LearningPath", b =>
                {
                    b.Property<int>("PathID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PathID");

                    b.HasIndex("UserID");

                    b.ToTable("LearningPaths");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Option", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionID"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionKey")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("OptionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.PathTopic", b =>
                {
                    b.Property<int>("PathTopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathTopicID"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PathID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("PathTopicID");

                    b.HasIndex("PathID");

                    b.HasIndex("TopicID");

                    b.ToTable("PathTopics");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("UserID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.PerformanceMetric", b =>
                {
                    b.Property<int>("MetricID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetricID"));

                    b.Property<decimal?>("AverageTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CorrectRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TrendScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MetricID");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("PerformanceMetrics");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuizID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Quiz", b =>
                {
                    b.Property<int>("QuizID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("QuizID");

                    b.HasIndex("TopicID");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.RevenueReport", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReportID");

                    b.ToTable("RevenueReports");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PlanType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("UserID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.TimeEstimation", b =>
                {
                    b.Property<int>("EstimationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstimationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EstimationID");

                    b.HasIndex("UserID");

                    b.ToTable("TimeEstimations");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Token", b =>
                {
                    b.Property<int>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenID"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenString")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TopicID");

                    b.HasIndex("CourseID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FullName = "Administrator",
                            IsActive = true,
                            PasswordHash = "$2a$11$tp/XWgvd4xVhLk5AhA3D0eJ85c5gVm70bnerCXjU0nV9Hd0XMzuvi",
                            Role = 1,
                            UpdatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserID = 2,
                            CreatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@example.com",
                            FullName = "Student",
                            IsActive = true,
                            PasswordHash = "$2a$11$tp/XWgvd4xVhLk5AhA3D0eJ85c5gVm70bnerCXjU0nV9Hd0XMzuvi",
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserAnswer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerID"));

                    b.Property<int>("AttemptID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AnswerID");

                    b.HasIndex("AttemptID");

                    b.HasIndex("QuestionID");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserProfile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"));

                    b.Property<string>("CVFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DailyStudyHours")
                        .HasColumnType("int");

                    b.Property<string>("Goals")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Interests")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Major")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PreferredStudyTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TranscriptFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProfileID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserQuizAttempt", b =>
                {
                    b.Property<int>("AttemptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptID"));

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AttemptID");

                    b.HasIndex("QuizID");

                    b.HasIndex("UserID");

                    b.ToTable("UserQuizAttempts");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserStatistic", b =>
                {
                    b.Property<int>("StatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatID"));

                    b.Property<int?>("ActiveUsers")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PremiumUsers")
                        .HasColumnType("int");

                    b.Property<int?>("TotalUsers")
                        .HasColumnType("int");

                    b.HasKey("StatID");

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Event", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID");

                    b.HasOne("Synapse_API.Models.Entities.Event", "ParentEvent")
                        .WithMany("ChildEvents")
                        .HasForeignKey("ParentEventID");

                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ParentEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.EventReminder", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Event", "Event")
                        .WithMany("EventReminders")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Goal", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.LearningActivity", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("LearningActivities")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.LearningPath", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("LearningPaths")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Option", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.PathTopic", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.LearningPath", "LearningPath")
                        .WithMany("PathTopics")
                        .HasForeignKey("PathID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synapse_API.Models.Entities.Topic", "Topic")
                        .WithMany("PathTopics")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningPath");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Payment", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.PerformanceMetric", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Topic", "Topic")
                        .WithMany("PerformanceMetrics")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("PerformanceMetrics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Question", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Quiz", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Topic", "Topic")
                        .WithMany("Quizzes")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Subscription", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.TimeEstimation", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("TimeEstimations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Token", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Topic", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserAnswer", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.UserQuizAttempt", "UserQuizAttempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AttemptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synapse_API.Models.Entities.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserQuizAttempt");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserProfile", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Synapse_API.Models.Entities.UserProfile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserQuizAttempt", b =>
                {
                    b.HasOne("Synapse_API.Models.Entities.Quiz", "Quiz")
                        .WithMany("UserQuizAttempts")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Synapse_API.Models.Entities.User", "User")
                        .WithMany("UserQuizAttempts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Course", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Event", b =>
                {
                    b.Navigation("ChildEvents");

                    b.Navigation("EventReminders");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.LearningPath", b =>
                {
                    b.Navigation("PathTopics");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserQuizAttempts");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.Topic", b =>
                {
                    b.Navigation("PathTopics");

                    b.Navigation("PerformanceMetrics");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Goals");

                    b.Navigation("LearningActivities");

                    b.Navigation("LearningPaths");

                    b.Navigation("Payments");

                    b.Navigation("PerformanceMetrics");

                    b.Navigation("Subscriptions");

                    b.Navigation("TimeEstimations");

                    b.Navigation("Tokens");

                    b.Navigation("UserProfile")
                        .IsRequired();

                    b.Navigation("UserQuizAttempts");
                });

            modelBuilder.Entity("Synapse_API.Models.Entities.UserQuizAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
